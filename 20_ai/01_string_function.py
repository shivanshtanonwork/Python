# Generated by ChatGPT -5
# import re

# def convert_string(text):
#     # Lowercase the text
#     text = text.lower()
#     # Replace any non-alphanumeric character with a dash
#     text = re.sub(r'[^a-z0-9]+', '-', text)
#     # Remove leading/trailing dashes
#     text = text.strip('-')
#     return text

# # Test cases
# print(convert_string("Hey you are good"))              # hey-you-are-good
# print(convert_string("Hello!! You are #1, okay?"))     # hello-you-are-1-okay
# print(convert_string("Python   is   great"))           # python-is-great
# print(convert_string("C++ is better than C#?"))        # c-is-better-than-c
# print(convert_string("No spaces_just_special$$chars")) # no-spaces-just-special-chars
# print(convert_string("UPPER case TEXT with Numbers 123")) # upper-case-text-with-numbers-123
# print(convert_string("   Leading and trailing spaces   ")) # leading-and-trailing-spaces

# by chatGPT without re
def convert_string(text):
    # Convert the entire string to lowercase for uniformity
    text = text.lower()
    # Initialize an empty result string to build the converted text
    result = ''
    
    # Loop through each character in the string
    for char in text:
        if char.isalnum():  # If the character is a letter or number, keep it
            result += char
        else:
            # If it's not alphanumeric, replace it with a dash
            # Also, prevent adding multiple consecutive dashes
            if not result.endswith('-'):
                result += '-'
    
    # Remove any leading or trailing dashes that might have been added
    result = result.strip('-')
    return result

# Test cases to check different scenarios
print(convert_string("Hey you are good"))              # hey-you-are-good
print(convert_string("Hello!! You are #1, okay?"))     # hello-you-are-1-okay
print(convert_string("Python   is   great"))           # python-is-great
print(convert_string("C++ is better than C#?"))        # c-is-better-than-c
print(convert_string("No spaces_just_special$$chars")) # no-spaces-just-special-chars
print(convert_string("UPPER case TEXT with Numbers 123")) # upper-case-text-with-numbers-123
print(convert_string("   Leading and trailing spaces   ")) # leading-and-trailing-spaces


# Generated by Claude ai
# import re

# def string_to_dash(text):
#     """
#     Convert a string to dash-separated format by:
#     1. Converting to lowercase
#     2. Replacing spaces and special characters with dashes
#     3. Removing consecutive dashes
#     4. Removing leading/trailing dashes
    
#     Args:
#         text (str): Input string to convert
        
#     Returns:
#         str: Converted string with dashes
        
#     Examples:
#         >>> string_to_dash("Hey you are good")
#         'hey-you-are-good'
#         >>> string_to_dash("Hello, World!")
#         'hello-world'
#         >>> string_to_dash("Multiple   spaces & special@chars")
#         'multiple-spaces-special-chars'
#     """
#     if not text:
#         return ""
    
#     # Convert to lowercase
#     text = text.lower()
    
#     # Replace any non-alphanumeric character with a dash
#     text = re.sub(r'[^a-z0-9]+', '-', text)
    
#     # Remove leading and trailing dashes
#     text = text.strip('-')
    
#     return text

# # Test the function
# if __name__ == "__main__":
#     test_cases = [
#         "Hey you are good",
#         "Hello, World!",
#         "Multiple   spaces & special@chars",
#         "CamelCaseText",
#         "numbers123and456letters",
#         "!!!Special@#$Characters%%%",
#         "   Leading and trailing spaces   ",
#         "",
#         "single"
#     ]
    
#     print("Testing string_to_dash function:")
#     print("-" * 50)
#     for test in test_cases:
#         result = string_to_dash(test)
#         print(f"'{test}' -> '{result}'")